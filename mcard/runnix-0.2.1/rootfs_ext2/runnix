#!/bin/sh
PATH=/bin:/sbin:/usr/bin:/usr/sbin

# BASE is where the runnix partition is mounted
BASE=/mnt/base

# ROOT is where the .run partition is mounted
ROOT=/mnt/root

DRIVES="hda hdb hdc hdd hde hdf hdg hdh sda sdb sdc sdd"

if `mount -t proc none /proc`
then
echo "proc mounted"
else
echo "Error mounting proc"
/bin/sh
fi

mount -t tmpfs none /tmp
mkdir /tmp/etc

CMDLINE=`cat /proc/cmdline`

for x in $DRIVES
do
if `mount -t vfat /dev/${x}1 $BASE > /dev/null 2>&1`
then
if [ -f $BASE/runnix ]
then
DEVICE=${x}
else
umount /dev/${x}1
fi
fi
done

for x in $DRIVES                                                
do
if `mount -t iso9660 -o ro /dev/${x} $BASE > /dev/null 2>&1`
then
if [ -f $BASE/runnix ]
then
DEVICE=${x}
RODEV=yes
else
umount /dev/${x}
fi
fi
done

# Loader not found
if [ ! $DEVICE ]
then
echo "Runnix device not found"
/bin/sh
exit
fi

# get image name
for i in ${CMDLINE}
do
if `echo $i | grep -q "runimg="`
then
RUNIMG=`echo $i | grep "runimg="| sed -e 's/runimg=//'`
fi
done

if [ -f $BASE/os/default.conf ]
then
. $BASE/os/default.conf
fi

if [ ! "$RUNIMG" ]
then
RUNIMG="auto"
fi

#Network support - yikes
if [ "$NDEV" ]
then
ifconfig lo up 127.0.0.1

if [ "$MAC" ]
then
ifconfig "$NDEV" hw ether "$MAC"
fi

if [ "$IP" = "dhcp" ]
then
echo "Configuring $NDEV with DHCP..."
udhcpc -nq -s /etc/udhcpc.script -i "$NDEV"
else
ifconfig "$NDEV" inet "$IP" netmask "$NM"
route add -net default gw "$GW"

for i in $DNS
do
echo "nameserver $i" >> /tmp/etc/resolv.conf
done

fi

if [ "$URL" ]
then
echo "Checking for updates..."

if `wget -q -c -O /tmp/ver $URL/ver`
then
VER=`cat /tmp/ver`

if [ -f $BASE/os/ver ]
then
OVER=`cat $BASE/os/ver`
else
OVER="NONE"
fi

if [ ! "$VER" = "$OVER" ]
then
echo "New version: $VER
Old version: $OVER"
wget -c -O /tmp/$VER.tar.gz $URL/$VER.tar.gz
wget -q -c -O /tmp/$VER.tar.gz.sha1 $URL/$VER.tar.gz.sha1
cd /tmp
echo "Verifying download - please wait"

if `sha1sum -cs $VER.tar.gz.sha1`
then
echo "Extracting image - please wait"
cd $BASE/os
tar -xzf /tmp/$VER.tar.gz
sync
echo "Verifying image - please wait"

cd $BASE/os/$VER
if `sha1sum -cs $VER.run.sha1`
then
mv $BASE/os/$VER/* $BASE/os/ && mv /tmp/ver $BASE/os/ver
rmdir $BASE/os/$VER
IMGVER=1

if [ "$USLEEP" ]
then
echo "Sleeping for "$USLEEP" seconds"
sleep $USLEEP
fi

fi
fi
fi
fi
fi
fi

if [ "$RUNIMG" = "auto" ]
then
# Get the latest good one
cd $BASE/os
RUNIMG=`ls *.run | tail -n1`
fi

#If we have a ver file, override auto/default.conf value
if [ -f $BASE/os/ver ]
then
RUNIMG=`cat $BASE/os/ver`.run
fi

if [ ! "$IMGVER" ]
then
echo "Verifying $RUNIMG..."

if `sha1sum -cs $RUNIMG.sha1`
then
echo "$RUNIMG verified"
IMGVER=1
else
echo "$RUNIMG not verified"
fi

fi

if [ -f $BASE/os/$RUNIMG.conf ]
then
. $BASE/os/$RUNIMG.conf
fi

if [ ! "$OFFSET" ]
then
losetup /dev/loop0 $BASE/os/$RUNIMG
else
losetup -o "$OFFSET" /dev/loop0 $BASE/os/$RUNIMG
fi

if [ ! "$FSTYPE" ]
then
FSTYPE=ext2
fi

if `mount -t $FSTYPE -o ro /dev/loop0 $ROOT`
then
echo "Root mounted"
else
echo "Error mounting $RUNIMG root fs"
/bin/sh
fi

if [ "$INITRD" ]
then

if [ -r "$INITRD" ]
then
echo "Custom initrd $INITRD found"
else
INITRD=$BASE/os/initrd.img
echo "Custom initrd not found - using $INITRD"
fi

else
echo "Using default initrd"
INITRD=$BASE/os/initrd.img
fi

if [ "$KERN" ]
then

if [ -r "$KERN" ]
then
echo "Custom kernel $KERN found"
else
KERN=$ROOT/boot/bzImage
echo "Custom kernel not found - using $KERN"
fi

else
echo "Using default kernel"
KERN=$ROOT/boot/bzImage
fi

if [ -r "$INITRD" -a -r "$KERN" ]
then
echo "Copying kernel and initrd to ramdisk..."
mount -t tmpfs none /mnt/tmp
cp "$INITRD" /mnt/tmp/initrd.img
cp "$KERN" /mnt/tmp/bzImage
echo "Unmounting image..."
umount $ROOT
else
echo "I couldn't find your kernel and/or initrd"
/bin/sh
fi

if [ ! "$KCMD" ]
then
echo "You need to specify a kernel command line"
echo "I can't guess that"
/bin/sh
fi

echo "Trying kexec..."
umount /tmp
kexec --command-line="$KCMD" --initrd=/mnt/tmp/initrd.img -f /mnt/tmp/bzImage

/bin/sh
